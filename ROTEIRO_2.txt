% mapa_ferramentas_testes.tex
\documentclass[11pt,a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[brazil]{babel}
\usepackage{lmodern}
\usepackage{microtype}
\usepackage{geometry}
\usepackage{hyperref}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage{listings}
\usepackage{caption}

\geometry{left=25mm,right=25mm,top=25mm,bottom=25mm}
\hypersetup{colorlinks=true,linkcolor=black,urlcolor=blue}

\title{Mapa de Ferramentas e Procedimentos de Teste \\ Trabalho 2 -- Sistema de Backup}
\author{Gabriel S.}
\date{\today}

\begin{document}
\maketitle

\begin{abstract}
  Mapa prático que relaciona cada tipo de teste exigido no trabalho com a(s) ferramenta(s) recomendada(s) (cpplint, cppcheck, valgrind, gcov/lcov, doxygen) e mostra exatamente como e quando executá-las. Inclui exemplos de comandos (Ubuntu) e recomendações sobre em que etapa do ciclo TDD/integração cada verificação deve ser aplicada.
\end{abstract}

\tableofcontents
\clearpage

\section{Visão geral}
Este documento organiza o uso das ferramentas solicitadas por tipo de verificação:
\begin{itemize}
  \item \textbf{Estilo/linters}: cpplint
  \item \textbf{Análise estática}: cppcheck
  \item \textbf{Análise dinâmica / memória}: valgrind
  \item \textbf{Cobertura de testes}: gcov + lcov / genhtml
  \item \textbf{Documentação}: doxygen
\end{itemize}

Para cada teste/ciclo TDD (RED-GREEN-REFACTOR) recomenda-se a sequência:
\begin{enumerate}
  \item escrever teste (RED)
  \item rodar suíte de testes (falhar)
  \item implementar código mínimo (GREEN)
  \item rodar testes (passar)
  \item executar verificações rápidas: cpplint, cppcheck
  \item executar valgrind nos testes relevantes (buscar leaks)
  \item commitar (pelo menos 3 commits: red, green, refactor)
  \item após acumular várias mudanças: gerar cobertura com gcov/lcov e atualizar documentação com doxygen
\end{enumerate}

\section{Tabela resumo: ferramenta $\rightarrow$ quando usar $\rightarrow$ comando exemplar}
\begin{longtable}{p{0.20\linewidth} p{0.30\linewidth} p{0.45\linewidth}}
\toprule
\textbf{Ferramenta} & \textbf{Quando usar} & \textbf{Comando exemplar e explicação} \\
\midrule
\endhead

cpplint & a cada commit/antes do pull request; após implementar/refatorar & 
\begin{lstlisting}[basicstyle=\ttfamily\small]
# verificar arquivos fonte
cpplint src/*.cpp include/*.hpp

# integrar no Makefile:
# lint:
#   cpplint src/*.cpp include/*.hpp || true
\end{lstlisting}
Verifica estilo segundo Google C++ style; use para encontrar problemas de formatação e possíveis práticas não recomendadas. \\
\midrule

cppcheck & durante o desenvolvimento e sempre antes de refatorar; em CI & 
\begin{lstlisting}[basicstyle=\ttfamily\small]
# execução simples
cppcheck --enable=warning --inconclusive --std=c11 src/

# salvar relatório para CI
cppcheck --enable=all --xml --xml-version=2 src 2> cppcheck-report.xml
\end{lstlisting}
Detecta erros estáticos, condições perigosas e potenciais bugs (null-deref, leak paths, etc.). Foque nos \texttt{error} e \texttt{warning}. \\
\midrule

valgrind & após o teste passar (GREEN) e após refatorações significativas & 
\begin{lstlisting}[basicstyle=\ttfamily\small]
# compilar com debug (-g) e sem otimizações (-O0)
gcc -g -O0 -o bin/test tests/test_suite.c src/backup.c

# executar com valgrind
valgrind --leak-check=full --show-leak-kinds=all ./bin/test
\end{lstlisting}
Detecta leaks, acessos inválidos de memória e uso errado do heap/stack. Execute sobre os binários dos testes unitários. \\
\midrule

gcov / lcov / genhtml & periodicamente (por exemplo: após concluir todos os testes de uma funcionalidade ou antes da entrega) & 
\begin{lstlisting}[basicstyle=\ttfamily\small]
# compilar com flags de cobertura
gcc -fprofile-arcs -ftest-coverage -g -O0 -o bin/test tests/test_suite.c src/backup.c

# executar a suíte de testes
./bin/test

# gerar arquivo info com lcov
lcov --capture --directory . --output-file coverage.info

# (opcional) filtrar system files
lcov --remove coverage.info '/usr/*' --output-file coverage_filtered.info

# gerar html
genhtml coverage_filtered.info --output-directory coverage_html
\end{lstlisting}
Gera métricas de cobertura linha-a-linha; busque cobertura $\geq$ 80\% por módulo. Integre ao Makefile como alvo \texttt{coverage}. \\
\midrule

doxygen & ao final de cada módulo implementado e antes da entrega; também útil após refactorizações que alterem APIs & 
\begin{lstlisting}[basicstyle=\ttfamily\small]
# criar Doxyfile padrão
doxygen -g Doxyfile

# ajustar entradas (INPUT, EXCLUDE, OUTPUT_DIRECTORY) no Doxyfile

# gerar documentação
doxygen Doxyfile
\end{lstlisting}
Gera documentação HTML a partir dos comentários Javadoc/Doxygen no código; inclua assertivas e contratos nas descrições das funções. \\
\bottomrule
\end{longtable}

\section{Mapeamento por tipo de teste do projeto}
Abaixo descrevemos cada teste típico do trabalho (derivado da tabela de decisão) e quais ferramentas usar em cada etapa — com comandos exemplares.

\subsection{Teste: Backup simples (arquivo existe no HD, não no Pen-drive)}
\textbf{Objetivo:} verificar que, operação = \texttt{backup}, arquivo listado em \texttt{Backup.parm} e presente só no HD é copiado para o pen.

\textbf{Etapas e ferramentas}
\begin{enumerate}
  \item \textbf{Red:} escrever teste unitário (gtest/catch) que cria diretórios temporários e configura \texttt{Backup.parm}.
  \item \textbf{Green:} implementar cópia mínima.
  \item \textbf{Lint/estilo:} rodar \texttt{cpplint} sobre os arquivos alterados.
  \item \textbf{Análise estática:} rodar \texttt{cppcheck --enable=warning src/backup.c}.
  \item \textbf{Valgrind:} compilar com \texttt{-g -O0} e executar o teste com \texttt{valgrind} para verificar vazamentos.
  \item \textbf{Cobertura:} rodar gcov/lcov após conjunto de testes para garantir que o caminho foi coberto.
\end{enumerate}

\subsection{Teste: Restauração (arquivo mais novo no pen)}
\textbf{Objetivo:} operação = \texttt{restauracao}, arquivo existe em ambos e pen $\rightarrow$ hd.

\textbf{Ferramentas:} mesmas etapas do caso anterior (cpplint, cppcheck, valgrind, gcov). Atenção especial para testes que manipulam timestamps — use \texttt{touch -d} para ajustar datas durante o teste.

\subsection{Teste: Arquivo inexistente no hd (Erro)}
\textbf{Objetivo:} operação = \texttt{backup} e arquivo listado não existe no HD $\Rightarrow$ comportamento de erro.

\textbf{Ferramentas:}
\begin{itemize}
  \item \texttt{gtest/catch}: escrever asserção que espera código de erro / mensagem específica.
  \item \texttt{cppcheck}: identificar possíveis paths não tratados.
  \item \texttt{valgrind}: garantir que mesmo em erro não haja leaks.
\end{itemize}

\subsection{Teste: Backup.parm ausente (Impossível)}
\textbf{Objetivo:} quando falta o arquivo de parâmetros, o programa retorna condição \texttt{impossível}.

\textbf{Ferramentas:}
\begin{itemize}
  \item testes unitários para validar o retorno/print de erro;
  \item cpplint/cppcheck/valgrind para checar robustez;
  \item cobertura: adicionar caso para esse caminho.
\end{itemize}

\subsection{Testes de caminhos / caixa aberta (ifs e loops)}
\textbf{Objetivo:} criar testes que cubram caminhos derivados das expressões regulares (0 iterações, 1 iteração, arrasto+1).

\textbf{Ferramentas:}
\begin{itemize}
  \item \textbf{gcov/lcov:} usar para verificar que todos os blocos e arestas foram percorridos.
  \item \textbf{cppcheck:} pode indicar código morto (não alcançável) ou construções perigosas.
  \item \textbf{valgrind:} sempre após executar caminhos complexos que alocam/desalocam memória.
\end{itemize}

\section{Sugestões de integração no Makefile / workflow}
Exemplos de alvos do \texttt{Makefile} que automatizam o mapa de ferramentas:

\begin{lstlisting}[basicstyle=\ttfamily\small]
.PHONY: all test lint static memcheck coverage doc clean

all: bin/backup

test: all
	# executar suíte de testes
	./bin/test_suite

lint:
	cpplint src/*.c include/*.h || true

static:
	cppcheck --enable=warning --inconclusive src/ 2> cppcheck-report.txt || true

memcheck: test
	valgrind --leak-check=full ./bin/test_suite

coverage:
	# compilar com flags de cobertura e rodar lcov pipeline (exemplo)
	lcov --capture --directory . --output-file coverage.info
	lcov --remove coverage.info '/usr/*' --output-file coverage_filtered.info
	genhtml coverage_filtered.info --output-directory coverage_html

doc:
	doxygen Doxyfile

clean:
	rm -rf bin/* coverage_* *.gcda *.gcno
\end{lstlisting}

Recomendação: coloque \texttt{lint} e \texttt{static} em seu CI (GitHub Actions, GitLab CI) para que sejam executados em cada push/pull request; reserve \texttt{memcheck} e \texttt{coverage} para execuções noturnas ou para runs manuais antes da entrega.

\section{Boas práticas e observações finais}
\begin{itemize}
  \item Sempre compile com \texttt{-g -O0} durante desenvolvimento para facilitar depuração e análises com valgrind; use otimizações apenas nas builds de release.
  \item Corrija problemas do \texttt{cppcheck} e do \texttt{cpplint} assim que surgirem — quanto antes, menor o custo.
  \item Faça commits pequenos e frequentes: cada passo do ciclo TDD (RED/GREEN/REFACTOR) deve ter um commit próprio.
  \item Mantenha um alvo \texttt{make ci} que rode \texttt{lint}, \texttt{static} e \texttt{test} para validar rapidamente antes de push.
  \item Documente as pré e pós-condições das funções no formato Doxygen para facilitar a avaliação e o entendimento.
\end{itemize}

\section{Apêndice: comandos rápidos de referência}
\begin{lstlisting}[basicstyle=\ttfamily\small]
# cpplint (estilo)
cpplint src/*.cpp include/*.hpp

# cppcheck (estático)
cppcheck --enable=warning --inconclusive --std=c11 src/ 2> cppcheck-report.txt

# valgrind (memória)
gcc -g -O0 -o bin/test tests/test_suite.c src/backup.c
valgrind --leak-check=full --show-leak-kinds=all ./bin/test

# cobertura (gcov + lcov + genhtml)
gcc -fprofile-arcs -ftest-coverage -g -O0 -o bin/test tests/test_suite.c src/backup.c
./bin/test
lcov --capture --directory . --output-file coverage.info
lcov --remove coverage.info '/usr/*' --output-file coverage_filtered.info
genhtml coverage_filtered.info --output-directory coverage_html

# doxygen
doxygen -g Doxyfile
# ajustar Doxyfile antes de rodar
doxygen Doxyfile
\end{lstlisting}

\end{document}
